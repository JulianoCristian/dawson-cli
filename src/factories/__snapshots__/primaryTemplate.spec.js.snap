exports[`primary template builder 1`] = `"{\"supportBucketName\":\"support-bucket-test\",\"stackName\":\"\",\"cfTemplateJSON\":\"{\\n  \\\"Parameters\\\": {\\n    \\\"DawsonStage\\\": {\\n      \\\"Type\\\": \\\"String\\\",\\n      \\\"Default\\\": \\\"devel\\\"\\n    }\\n  },\\n  \\\"Resources\\\": {\\n    \\\"BucketAssets\\\": {\\n      \\\"Type\\\": \\\"AWS::S3::Bucket\\\",\\n      \\\"Properties\\\": {\\n        \\\"WebsiteConfiguration\\\": {\\n          \\\"ErrorDocument\\\": \\\"index.html\\\",\\n          \\\"IndexDocument\\\": \\\"index.html\\\"\\n        }\\n      }\\n    },\\n    \\\"API\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::RestApi\\\",\\n      \\\"Properties\\\": {\\n        \\\"Description\\\": \\\"REST API for dawson app\\\",\\n        \\\"Name\\\": \\\"AppAPIDevel\\\"\\n      }\\n    },\\n    \\\"ResourceBar\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Resource\\\",\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"ParentId\\\": {\\n          \\\"Fn::GetAtt\\\": [\\n            \\\"API\\\",\\n            \\\"RootResourceId\\\"\\n          ]\\n        },\\n        \\\"PathPart\\\": \\\"bar\\\"\\n      }\\n    },\\n    \\\"PermissionForLambdaFooAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Permission\\\",\\n      \\\"Properties\\\": {\\n        \\\"Action\\\": \\\"lambda:InvokeFunction\\\",\\n        \\\"FunctionName\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${LambdaFooAPI.Arn}\\\"\\n        },\\n        \\\"Principal\\\": \\\"apigateway.amazonaws.com\\\",\\n        \\\"SourceArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\\\"\\n        }\\n      }\\n    },\\n    \\\"ExecutionRoleForLambdaFooAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"lambda.amazonaws.com\\\"\\n                ],\\n                \\\"AWS\\\": [\\n                  {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:iam::\${AWS::AccountId}:root\\\"\\n                  }\\n                ]\\n              },\\n              \\\"Action\\\": [\\n                \\\"sts:AssumeRole\\\"\\n              ]\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"Policies\\\": [\\n          {\\n            \\\"PolicyName\\\": \\\"dawson-policy\\\",\\n            \\\"PolicyDocument\\\": {\\n              \\\"Version\\\": \\\"2012-10-17\\\",\\n              \\\"Statement\\\": [\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"logs:CreateLogGroup\\\",\\n                    \\\"logs:CreateLogStream\\\",\\n                    \\\"logs:PutLogEvents\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\\\"\\n                  }\\n                },\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"cloudformation:DescribeStacks\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Join\\\": [\\n                      \\\"\\\",\\n                      [\\n                        \\\"arn:aws:cloudformation:\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::Region\\\"\\n                        },\\n                        \\\":\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::AccountId\\\"\\n                        },\\n                        \\\":stack/\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::StackName\\\"\\n                        },\\n                        \\\"/*\\\"\\n                      ]\\n                    ]\\n                  }\\n                }\\n              ]\\n            }\\n          }\\n        ]\\n      }\\n    },\\n    \\\"LambdaFooAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Function\\\",\\n      \\\"Properties\\\": {\\n        \\\"Handler\\\": \\\"dawsonindex.fooAPI\\\",\\n        \\\"Role\\\": {\\n          \\\"Fn::GetAtt\\\": [\\n            \\\"ExecutionRoleForLambdaFooAPI\\\",\\n            \\\"Arn\\\"\\n          ]\\n        },\\n        \\\"Code\\\": {},\\n        \\\"Runtime\\\": \\\"nodejs4.3\\\",\\n        \\\"MemorySize\\\": 1024,\\n        \\\"Timeout\\\": 30,\\n        \\\"Environment\\\": {\\n          \\\"Variables\\\": {\\n            \\\"NODE_ENV\\\": \\\"development\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"ModelHelloWorldModel\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Model\\\",\\n      \\\"Properties\\\": {\\n        \\\"ContentType\\\": \\\"application/json\\\",\\n        \\\"Description\\\": \\\"Model HelloWorldModel\\\",\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"Schema\\\": \\\"{}\\\"\\n      }\\n    },\\n    \\\"MethodBarPOST\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Method\\\",\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"ResourceId\\\": {\\n          \\\"Ref\\\": \\\"ResourceBar\\\"\\n        },\\n        \\\"HttpMethod\\\": \\\"POST\\\",\\n        \\\"Integration\\\": {\\n          \\\"IntegrationHttpMethod\\\": \\\"POST\\\",\\n          \\\"IntegrationResponses\\\": [\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set($inputRoot = $input.path(\'$\'))\\\\n$inputRoot.response\\\"\\n              },\\n              \\\"StatusCode\\\": 200\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":500.*\\\",\\n              \\\"StatusCode\\\": 500\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":400.*\\\",\\n              \\\"StatusCode\\\": 400\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":403.*\\\",\\n              \\\"StatusCode\\\": 403\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":404.*\\\",\\n              \\\"StatusCode\\\": 404\\n            }\\n          ],\\n          \\\"PassthroughBehavior\\\": \\\"NEVER\\\",\\n          \\\"RequestTemplates\\\": {\\n            \\\"application/x-www-form-urlencoded\\\": \\\"#set($allParams = $input.params())\\\\n{\\\\n  \\\\\\\"params\\\\\\\" : {\\\\n    #foreach($type in $allParams.keySet())\\\\n    #set($params = $allParams.get($type))\\\\n    \\\\\\\"$type\\\\\\\" : {\\\\n      #foreach($paramName in $params.keySet())\\\\n      \\\\\\\"$paramName\\\\\\\" : \\\\\\\"$util.escapeJavaScript($params.get($paramName))\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    }\\\\n    #if($foreach.hasNext),#end\\\\n    #end\\\\n  },\\\\n  \\\\\\\"context\\\\\\\" : {\\\\n    \\\\\\\"apiId\\\\\\\": \\\\\\\"$context.apiId\\\\\\\",\\\\n    \\\\\\\"authorizer\\\\\\\": {\\\\n      #foreach($property in $context.authorizer.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.authorizer.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"httpMethod\\\\\\\": \\\\\\\"$context.httpMethod\\\\\\\",\\\\n    \\\\\\\"identity\\\\\\\": {\\\\n      #foreach($property in $context.identity.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.identity.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"requestId\\\\\\\": \\\\\\\"$context.requestId\\\\\\\",\\\\n    \\\\\\\"resourceId\\\\\\\": \\\\\\\"$context.resourceId\\\\\\\",\\\\n    \\\\\\\"resourcePath\\\\\\\": \\\\\\\"$context.resourcePath\\\\\\\",\\\\n    \\\\\\\"stage\\\\\\\": \\\\\\\"$context.stage\\\\\\\"\\\\n  },\\\\n  \\\\\\\"body\\\\\\\": $input.json(\'$\'),\\\\n  \\\\\\\"meta\\\\\\\": {\\\\n    \\\\\\\"expectedResponseContentType\\\\\\\": \\\\\\\"text/html\\\\\\\"\\\\n  }\\\\n}\\\",\\n            \\\"application/json\\\": \\\"#set($allParams = $input.params())\\\\n{\\\\n  \\\\\\\"params\\\\\\\" : {\\\\n    #foreach($type in $allParams.keySet())\\\\n    #set($params = $allParams.get($type))\\\\n    \\\\\\\"$type\\\\\\\" : {\\\\n      #foreach($paramName in $params.keySet())\\\\n      \\\\\\\"$paramName\\\\\\\" : \\\\\\\"$util.escapeJavaScript($params.get($paramName))\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    }\\\\n    #if($foreach.hasNext),#end\\\\n    #end\\\\n  },\\\\n  \\\\\\\"context\\\\\\\" : {\\\\n    \\\\\\\"apiId\\\\\\\": \\\\\\\"$context.apiId\\\\\\\",\\\\n    \\\\\\\"authorizer\\\\\\\": {\\\\n      #foreach($property in $context.authorizer.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.authorizer.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"httpMethod\\\\\\\": \\\\\\\"$context.httpMethod\\\\\\\",\\\\n    \\\\\\\"identity\\\\\\\": {\\\\n      #foreach($property in $context.identity.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.identity.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"requestId\\\\\\\": \\\\\\\"$context.requestId\\\\\\\",\\\\n    \\\\\\\"resourceId\\\\\\\": \\\\\\\"$context.resourceId\\\\\\\",\\\\n    \\\\\\\"resourcePath\\\\\\\": \\\\\\\"$context.resourcePath\\\\\\\",\\\\n    \\\\\\\"stage\\\\\\\": \\\\\\\"$context.stage\\\\\\\"\\\\n  },\\\\n  \\\\\\\"body\\\\\\\": $input.json(\'$\'),\\\\n  \\\\\\\"meta\\\\\\\": {\\\\n    \\\\\\\"expectedResponseContentType\\\\\\\": \\\\\\\"text/html\\\\\\\"\\\\n  }\\\\n}\\\"\\n          },\\n          \\\"Type\\\": \\\"AWS\\\",\\n          \\\"Uri\\\": {\\n            \\\"Fn::Join\\\": [\\n              \\\"\\\",\\n              [\\n                \\\"arn:aws:apigateway:\\\",\\n                {\\n                  \\\"Ref\\\": \\\"AWS::Region\\\"\\n                },\\n                \\\":lambda:path/2015-03-31/functions/\\\",\\n                {\\n                  \\\"Fn::GetAtt\\\": [\\n                    \\\"LambdaFooAPI\\\",\\n                    \\\"Arn\\\"\\n                  ]\\n                },\\n                \\\"/invocations\\\"\\n              ]\\n            ]\\n          }\\n        },\\n        \\\"MethodResponses\\\": [\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 200\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 400\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 403\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 404\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 500\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 307,\\n            \\\"ResponseParameters\\\": {\\n              \\\"method.response.header.Location\\\": false\\n            }\\n          }\\n        ],\\n        \\\"AuthorizationType\\\": \\\"NONE\\\"\\n      }\\n    },\\n    \\\"PermissionForLambdaBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Permission\\\",\\n      \\\"Properties\\\": {\\n        \\\"Action\\\": \\\"lambda:InvokeFunction\\\",\\n        \\\"FunctionName\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${LambdaBarAPI.Arn}\\\"\\n        },\\n        \\\"Principal\\\": \\\"apigateway.amazonaws.com\\\",\\n        \\\"SourceArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\\\"\\n        }\\n      }\\n    },\\n    \\\"ExecutionRoleForLambdaBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"lambda.amazonaws.com\\\"\\n                ],\\n                \\\"AWS\\\": [\\n                  {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:iam::\${AWS::AccountId}:root\\\"\\n                  }\\n                ]\\n              },\\n              \\\"Action\\\": [\\n                \\\"sts:AssumeRole\\\"\\n              ]\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"Policies\\\": [\\n          {\\n            \\\"PolicyName\\\": \\\"dawson-policy\\\",\\n            \\\"PolicyDocument\\\": {\\n              \\\"Version\\\": \\\"2012-10-17\\\",\\n              \\\"Statement\\\": [\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"logs:CreateLogGroup\\\",\\n                    \\\"logs:CreateLogStream\\\",\\n                    \\\"logs:PutLogEvents\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\\\"\\n                  }\\n                },\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"cloudformation:DescribeStacks\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Join\\\": [\\n                      \\\"\\\",\\n                      [\\n                        \\\"arn:aws:cloudformation:\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::Region\\\"\\n                        },\\n                        \\\":\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::AccountId\\\"\\n                        },\\n                        \\\":stack/\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::StackName\\\"\\n                        },\\n                        \\\"/*\\\"\\n                      ]\\n                    ]\\n                  }\\n                }\\n              ]\\n            }\\n          }\\n        ]\\n      }\\n    },\\n    \\\"LambdaBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Function\\\",\\n      \\\"Properties\\\": {\\n        \\\"Handler\\\": \\\"dawsonindex.barAPI\\\",\\n        \\\"Role\\\": {\\n          \\\"Fn::GetAtt\\\": [\\n            \\\"ExecutionRoleForLambdaBarAPI\\\",\\n            \\\"Arn\\\"\\n          ]\\n        },\\n        \\\"Code\\\": {},\\n        \\\"Runtime\\\": \\\"nodejs4.3\\\",\\n        \\\"MemorySize\\\": 1024,\\n        \\\"Timeout\\\": 30,\\n        \\\"Environment\\\": {\\n          \\\"Variables\\\": {\\n            \\\"NODE_ENV\\\": \\\"development\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"DeploymentAVA\\\": {\\n      \\\"DependsOn\\\": [\\n        \\\"MethodBarPOST\\\"\\n      ],\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Deployment\\\",\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"Description\\\": \\\"Automated deployment by dawson\\\"\\n      }\\n    },\\n    \\\"WWWDistribution\\\": {\\n      \\\"Type\\\": \\\"AWS::CloudFront::Distribution\\\",\\n      \\\"DependsOn\\\": [\\n        \\\"API\\\",\\n        \\\"BucketAssets\\\"\\n      ],\\n      \\\"Properties\\\": {\\n        \\\"DistributionConfig\\\": {\\n          \\\"Origins\\\": [\\n            {\\n              \\\"DomainName\\\": {\\n                \\\"Fn::Join\\\": [\\n                  \\\"\\\",\\n                  [\\n                    {\\n                      \\\"Ref\\\": \\\"BucketAssets\\\"\\n                    },\\n                    \\\".s3-website-\\\",\\n                    {\\n                      \\\"Ref\\\": \\\"AWS::Region\\\"\\n                    },\\n                    \\\".amazonaws.com\\\"\\n                  ]\\n                ]\\n              },\\n              \\\"Id\\\": \\\"s3www\\\",\\n              \\\"CustomOriginConfig\\\": {\\n                \\\"HTTPPort\\\": \\\"80\\\",\\n                \\\"HTTPSPort\\\": \\\"443\\\",\\n                \\\"OriginProtocolPolicy\\\": \\\"http-only\\\"\\n              }\\n            },\\n            {\\n              \\\"DomainName\\\": {\\n                \\\"Fn::Join\\\": [\\n                  \\\"\\\",\\n                  [\\n                    {\\n                      \\\"Ref\\\": \\\"API\\\"\\n                    },\\n                    \\\".execute-api.\\\",\\n                    {\\n                      \\\"Ref\\\": \\\"AWS::Region\\\"\\n                    },\\n                    \\\".amazonaws.com\\\"\\n                  ]\\n                ]\\n              },\\n              \\\"Id\\\": \\\"api\\\",\\n              \\\"CustomOriginConfig\\\": {\\n                \\\"HTTPPort\\\": \\\"80\\\",\\n                \\\"HTTPSPort\\\": \\\"443\\\",\\n                \\\"OriginProtocolPolicy\\\": \\\"https-only\\\"\\n              }\\n            }\\n          ],\\n          \\\"Enabled\\\": \\\"true\\\",\\n          \\\"Comment\\\": \\\"\\\",\\n          \\\"DefaultRootObject\\\": \\\"index.html\\\",\\n          \\\"DefaultCacheBehavior\\\": {\\n            \\\"TargetOriginId\\\": \\\"s3www\\\",\\n            \\\"SmoothStreaming\\\": \\\"false\\\",\\n            \\\"ForwardedValues\\\": {\\n              \\\"QueryString\\\": \\\"true\\\"\\n            },\\n            \\\"MinTTL\\\": \\\"0\\\",\\n            \\\"MaxTTL\\\": \\\"0\\\",\\n            \\\"DefaultTTL\\\": \\\"0\\\",\\n            \\\"ViewerProtocolPolicy\\\": \\\"allow-all\\\"\\n          },\\n          \\\"CacheBehaviors\\\": [\\n            {\\n              \\\"AllowedMethods\\\": [\\n                \\\"DELETE\\\",\\n                \\\"GET\\\",\\n                \\\"HEAD\\\",\\n                \\\"OPTIONS\\\",\\n                \\\"PATCH\\\",\\n                \\\"POST\\\",\\n                \\\"PUT\\\"\\n              ],\\n              \\\"TargetOriginId\\\": \\\"api\\\",\\n              \\\"ForwardedValues\\\": {\\n                \\\"QueryString\\\": \\\"true\\\",\\n                \\\"Headers\\\": [\\n                  \\\"Authorization\\\",\\n                  \\\"Accept\\\",\\n                  \\\"Content-Type\\\",\\n                  \\\"Origin\\\",\\n                  \\\"Referer\\\",\\n                  \\\"Access-Control-Request-Headers\\\",\\n                  \\\"Access-Control-Request-Method\\\"\\n                ]\\n              },\\n              \\\"ViewerProtocolPolicy\\\": \\\"allow-all\\\",\\n              \\\"MinTTL\\\": \\\"0\\\",\\n              \\\"MaxTTL\\\": \\\"0\\\",\\n              \\\"DefaultTTL\\\": \\\"0\\\",\\n              \\\"PathPattern\\\": \\\"prod/*\\\"\\n            }\\n          ],\\n          \\\"PriceClass\\\": \\\"PriceClass_200\\\",\\n          \\\"ViewerCertificate\\\": {\\n            \\\"CloudFrontDefaultCertificate\\\": \\\"true\\\"\\n          },\\n          \\\"CustomErrorResponses\\\": [\\n            {\\n              \\\"ErrorCode\\\": \\\"404\\\",\\n              \\\"ResponsePagePath\\\": \\\"/index.html\\\",\\n              \\\"ResponseCode\\\": \\\"200\\\",\\n              \\\"ErrorCachingMinTTL\\\": \\\"30\\\"\\n            },\\n            {\\n              \\\"ErrorCode\\\": \\\"403\\\",\\n              \\\"ResponsePagePath\\\": \\\"/index.html\\\",\\n              \\\"ResponseCode\\\": \\\"200\\\",\\n              \\\"ErrorCachingMinTTL\\\": \\\"30\\\"\\n            }\\n          ]\\n        }\\n      }\\n    },\\n    \\\"StageProd\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Stage\\\",\\n      \\\"Properties\\\": {\\n        \\\"CacheClusterEnabled\\\": false,\\n        \\\"DeploymentId\\\": {\\n          \\\"Ref\\\": \\\"DeploymentAVA\\\"\\n        },\\n        \\\"Description\\\": \\\"prod Stage\\\",\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"StageName\\\": \\\"prod\\\",\\n        \\\"MethodSettings\\\": [\\n          {\\n            \\\"HttpMethod\\\": \\\"*\\\",\\n            \\\"ResourcePath\\\": \\\"/*\\\",\\n            \\\"LoggingLevel\\\": \\\"INFO\\\",\\n            \\\"DataTraceEnabled\\\": \\\"true\\\"\\n          }\\n        ]\\n      }\\n    },\\n    \\\"RoleAPIGatewayAccount\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"apigateway.amazonaws.com\\\"\\n                ]\\n              },\\n              \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"ManagedPolicyArns\\\": [\\n          \\\"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\\\"\\n        ]\\n      }\\n    },\\n    \\\"APIGatewayAccount\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Account\\\",\\n      \\\"Properties\\\": {\\n        \\\"CloudWatchRoleArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${RoleAPIGatewayAccount.Arn}\\\"\\n        }\\n      }\\n    }\\n  },\\n  \\\"Outputs\\\": {\\n    \\\"BucketAssets\\\": {\\n      \\\"Value\\\": {\\n        \\\"Ref\\\": \\\"BucketAssets\\\"\\n      }\\n    },\\n    \\\"DistributionWWW\\\": {\\n      \\\"Value\\\": {\\n        \\\"Fn::GetAtt\\\": [\\n          \\\"WWWDistribution\\\",\\n          \\\"DomainName\\\"\\n        ]\\n      }\\n    }\\n  }\\n}\",\"cloudfrontCustomDomain\":null}"`;
