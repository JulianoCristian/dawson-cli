exports[`primary template builder 1`] = `"{\"supportBucketName\":\"support-bucket-test\",\"stackName\":\"\",\"cfTemplateJSON\":\"{\\n  \\\"Parameters\\\": {\\n    \\\"DawsonStage\\\": {\\n      \\\"Type\\\": \\\"String\\\",\\n      \\\"Default\\\": \\\"devel\\\"\\n    }\\n  },\\n  \\\"Resources\\\": {\\n    \\\"BucketAssets\\\": {\\n      \\\"Type\\\": \\\"AWS::S3::Bucket\\\",\\n      \\\"Properties\\\": {\\n        \\\"WebsiteConfiguration\\\": {\\n          \\\"ErrorDocument\\\": \\\"index.html\\\",\\n          \\\"IndexDocument\\\": \\\"index.html\\\"\\n        }\\n      }\\n    },\\n    \\\"API\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::RestApi\\\",\\n      \\\"Properties\\\": {\\n        \\\"Description\\\": \\\"REST API for dawson app\\\",\\n        \\\"Name\\\": \\\"AppAPIDevel\\\"\\n      }\\n    },\\n    \\\"PermissionForLambdaBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Permission\\\",\\n      \\\"Properties\\\": {\\n        \\\"Action\\\": \\\"lambda:InvokeFunction\\\",\\n        \\\"FunctionName\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${LambdaBarAPI.Arn}\\\"\\n        },\\n        \\\"Principal\\\": \\\"apigateway.amazonaws.com\\\",\\n        \\\"SourceArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\\\"\\n        }\\n      }\\n    },\\n    \\\"ExecutionRoleForLambdaBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"lambda.amazonaws.com\\\"\\n                ],\\n                \\\"AWS\\\": [\\n                  {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:iam::\${AWS::AccountId}:root\\\"\\n                  }\\n                ]\\n              },\\n              \\\"Action\\\": [\\n                \\\"sts:AssumeRole\\\"\\n              ]\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"Policies\\\": [\\n          {\\n            \\\"PolicyName\\\": \\\"dawson-policy\\\",\\n            \\\"PolicyDocument\\\": {\\n              \\\"Version\\\": \\\"2012-10-17\\\",\\n              \\\"Statement\\\": [\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"logs:CreateLogGroup\\\",\\n                    \\\"logs:CreateLogStream\\\",\\n                    \\\"logs:PutLogEvents\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\\\"\\n                  }\\n                },\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"cloudformation:DescribeStacks\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Join\\\": [\\n                      \\\"\\\",\\n                      [\\n                        \\\"arn:aws:cloudformation:\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::Region\\\"\\n                        },\\n                        \\\":\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::AccountId\\\"\\n                        },\\n                        \\\":stack/\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::StackName\\\"\\n                        },\\n                        \\\"/*\\\"\\n                      ]\\n                    ]\\n                  }\\n                }\\n              ]\\n            }\\n          }\\n        ]\\n      }\\n    },\\n    \\\"LambdaBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Function\\\",\\n      \\\"Properties\\\": {\\n        \\\"Handler\\\": \\\"dawsonindex.barAPI\\\",\\n        \\\"Role\\\": {\\n          \\\"Fn::GetAtt\\\": [\\n            \\\"ExecutionRoleForLambdaBarAPI\\\",\\n            \\\"Arn\\\"\\n          ]\\n        },\\n        \\\"Code\\\": {},\\n        \\\"Runtime\\\": \\\"nodejs4.3\\\",\\n        \\\"MemorySize\\\": 1024,\\n        \\\"Timeout\\\": 30,\\n        \\\"Environment\\\": {\\n          \\\"Variables\\\": {\\n            \\\"DAWSON_DistributionWWW\\\": {\\n              \\\"Fn::GetAtt\\\": [\\n                \\\"WWWDistribution\\\",\\n                \\\"DomainName\\\"\\n              ]\\n            },\\n            \\\"NODE_ENV\\\": \\\"development\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"DeploymentAVA\\\": {\\n      \\\"DependsOn\\\": [],\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Deployment\\\",\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"Description\\\": \\\"Automated deployment by dawson\\\"\\n      }\\n    },\\n    \\\"WWWDistribution\\\": {\\n      \\\"Type\\\": \\\"AWS::CloudFront::Distribution\\\",\\n      \\\"DependsOn\\\": [\\n        \\\"API\\\",\\n        \\\"BucketAssets\\\"\\n      ],\\n      \\\"Properties\\\": {\\n        \\\"DistributionConfig\\\": {\\n          \\\"Aliases\\\": [\\n            \\\"mydomain.com\\\"\\n          ],\\n          \\\"Origins\\\": [\\n            {\\n              \\\"DomainName\\\": {\\n                \\\"Fn::Join\\\": [\\n                  \\\"\\\",\\n                  [\\n                    {\\n                      \\\"Ref\\\": \\\"BucketAssets\\\"\\n                    },\\n                    \\\".s3-website-\\\",\\n                    {\\n                      \\\"Ref\\\": \\\"AWS::Region\\\"\\n                    },\\n                    \\\".amazonaws.com\\\"\\n                  ]\\n                ]\\n              },\\n              \\\"Id\\\": \\\"s3www\\\",\\n              \\\"CustomOriginConfig\\\": {\\n                \\\"HTTPPort\\\": \\\"80\\\",\\n                \\\"HTTPSPort\\\": \\\"443\\\",\\n                \\\"OriginProtocolPolicy\\\": \\\"http-only\\\"\\n              }\\n            },\\n            {\\n              \\\"DomainName\\\": {\\n                \\\"Fn::Join\\\": [\\n                  \\\"\\\",\\n                  [\\n                    {\\n                      \\\"Ref\\\": \\\"API\\\"\\n                    },\\n                    \\\".execute-api.\\\",\\n                    {\\n                      \\\"Ref\\\": \\\"AWS::Region\\\"\\n                    },\\n                    \\\".amazonaws.com\\\"\\n                  ]\\n                ]\\n              },\\n              \\\"Id\\\": \\\"api\\\",\\n              \\\"CustomOriginConfig\\\": {\\n                \\\"HTTPPort\\\": \\\"80\\\",\\n                \\\"HTTPSPort\\\": \\\"443\\\",\\n                \\\"OriginProtocolPolicy\\\": \\\"https-only\\\"\\n              }\\n            }\\n          ],\\n          \\\"Enabled\\\": \\\"true\\\",\\n          \\\"Comment\\\": \\\"\\\",\\n          \\\"DefaultRootObject\\\": \\\"index.html\\\",\\n          \\\"DefaultCacheBehavior\\\": {\\n            \\\"TargetOriginId\\\": \\\"s3www\\\",\\n            \\\"SmoothStreaming\\\": \\\"false\\\",\\n            \\\"ForwardedValues\\\": {\\n              \\\"QueryString\\\": \\\"true\\\"\\n            },\\n            \\\"MinTTL\\\": \\\"0\\\",\\n            \\\"MaxTTL\\\": \\\"0\\\",\\n            \\\"DefaultTTL\\\": \\\"0\\\",\\n            \\\"ViewerProtocolPolicy\\\": \\\"allow-all\\\"\\n          },\\n          \\\"CacheBehaviors\\\": [\\n            {\\n              \\\"AllowedMethods\\\": [\\n                \\\"DELETE\\\",\\n                \\\"GET\\\",\\n                \\\"HEAD\\\",\\n                \\\"OPTIONS\\\",\\n                \\\"PATCH\\\",\\n                \\\"POST\\\",\\n                \\\"PUT\\\"\\n              ],\\n              \\\"TargetOriginId\\\": \\\"api\\\",\\n              \\\"ForwardedValues\\\": {\\n                \\\"QueryString\\\": \\\"true\\\",\\n                \\\"Headers\\\": [\\n                  \\\"Authorization\\\",\\n                  \\\"Accept\\\",\\n                  \\\"Content-Type\\\",\\n                  \\\"Origin\\\",\\n                  \\\"Referer\\\",\\n                  \\\"Access-Control-Request-Headers\\\",\\n                  \\\"Access-Control-Request-Method\\\"\\n                ]\\n              },\\n              \\\"ViewerProtocolPolicy\\\": \\\"allow-all\\\",\\n              \\\"MinTTL\\\": \\\"0\\\",\\n              \\\"MaxTTL\\\": \\\"0\\\",\\n              \\\"DefaultTTL\\\": \\\"0\\\",\\n              \\\"PathPattern\\\": \\\"prod/*\\\"\\n            }\\n          ],\\n          \\\"PriceClass\\\": \\\"PriceClass_200\\\",\\n          \\\"ViewerCertificate\\\": {\\n            \\\"AcmCertificateArn\\\": \\\"arn:bar\\\",\\n            \\\"SslSupportMethod\\\": \\\"sni-only\\\"\\n          },\\n          \\\"CustomErrorResponses\\\": [\\n            {\\n              \\\"ErrorCode\\\": \\\"404\\\",\\n              \\\"ResponsePagePath\\\": \\\"/index.html\\\",\\n              \\\"ResponseCode\\\": \\\"200\\\",\\n              \\\"ErrorCachingMinTTL\\\": \\\"30\\\"\\n            },\\n            {\\n              \\\"ErrorCode\\\": \\\"403\\\",\\n              \\\"ResponsePagePath\\\": \\\"/index.html\\\",\\n              \\\"ResponseCode\\\": \\\"200\\\",\\n              \\\"ErrorCachingMinTTL\\\": \\\"30\\\"\\n            }\\n          ]\\n        }\\n      }\\n    },\\n    \\\"Route53Record\\\": {\\n      \\\"Type\\\": \\\"AWS::Route53::RecordSet\\\",\\n      \\\"Properties\\\": {\\n        \\\"AliasTarget\\\": {\\n          \\\"DNSName\\\": {\\n            \\\"Fn::Sub\\\": \\\"\${WWWDistribution.DomainName}\\\"\\n          },\\n          \\\"HostedZoneId\\\": \\\"Z2FDTNDATAQYW2\\\"\\n        },\\n        \\\"Comment\\\": \\\"Record managed by dawson.\\\",\\n        \\\"HostedZoneId\\\": {\\n          \\\"devel\\\": \\\"ASDBAR123\\\"\\n        },\\n        \\\"Name\\\": \\\"mydomain.com\\\",\\n        \\\"Type\\\": \\\"A\\\"\\n      }\\n    },\\n    \\\"StageProd\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Stage\\\",\\n      \\\"Properties\\\": {\\n        \\\"CacheClusterEnabled\\\": false,\\n        \\\"DeploymentId\\\": {\\n          \\\"Ref\\\": \\\"DeploymentAVA\\\"\\n        },\\n        \\\"Description\\\": \\\"prod Stage\\\",\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"StageName\\\": \\\"prod\\\",\\n        \\\"MethodSettings\\\": [\\n          {\\n            \\\"HttpMethod\\\": \\\"*\\\",\\n            \\\"ResourcePath\\\": \\\"/*\\\",\\n            \\\"LoggingLevel\\\": \\\"INFO\\\",\\n            \\\"DataTraceEnabled\\\": \\\"true\\\"\\n          }\\n        ]\\n      }\\n    },\\n    \\\"RoleAPIGatewayAccount\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"apigateway.amazonaws.com\\\"\\n                ]\\n              },\\n              \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"ManagedPolicyArns\\\": [\\n          \\\"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\\\"\\n        ]\\n      }\\n    },\\n    \\\"APIGatewayAccount\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Account\\\",\\n      \\\"Properties\\\": {\\n        \\\"CloudWatchRoleArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${RoleAPIGatewayAccount.Arn}\\\"\\n        }\\n      }\\n    }\\n  },\\n  \\\"Outputs\\\": {\\n    \\\"BucketAssets\\\": {\\n      \\\"Value\\\": {\\n        \\\"Ref\\\": \\\"BucketAssets\\\"\\n      }\\n    },\\n    \\\"DistributionWWW\\\": {\\n      \\\"Value\\\": {\\n        \\\"Fn::GetAtt\\\": [\\n          \\\"WWWDistribution\\\",\\n          \\\"DomainName\\\"\\n        ]\\n      }\\n    }\\n  }\\n}\",\"cfTemplate\":{\"Parameters\":{\"DawsonStage\":{\"Type\":\"String\",\"Default\":\"devel\"}},\"Resources\":{\"BucketAssets\":{\"Type\":\"AWS::S3::Bucket\",\"Properties\":{\"WebsiteConfiguration\":{\"ErrorDocument\":\"index.html\",\"IndexDocument\":\"index.html\"}}},\"API\":{\"Type\":\"AWS::ApiGateway::RestApi\",\"Properties\":{\"Description\":\"REST API for dawson app\",\"Name\":\"AppAPIDevel\"}},\"PermissionForLambdaBarAPI\":{\"Type\":\"AWS::Lambda::Permission\",\"Properties\":{\"Action\":\"lambda:InvokeFunction\",\"FunctionName\":{\"Fn::Sub\":\"\${LambdaBarAPI.Arn}\"},\"Principal\":\"apigateway.amazonaws.com\",\"SourceArn\":{\"Fn::Sub\":\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\"}}},\"ExecutionRoleForLambdaBarAPI\":{\"Type\":\"AWS::IAM::Role\",\"Properties\":{\"AssumeRolePolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\"],\"AWS\":[{\"Fn::Sub\":\"arn:aws:iam::\${AWS::AccountId}:root\"}]},\"Action\":[\"sts:AssumeRole\"]}]},\"Path\":\"/\",\"Policies\":[{\"PolicyName\":\"dawson-policy\",\"PolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Resource\":{\"Fn::Sub\":\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\"}},{\"Effect\":\"Allow\",\"Action\":[\"cloudformation:DescribeStacks\"],\"Resource\":{\"Fn::Join\":[\"\",[\"arn:aws:cloudformation:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":stack/\",{\"Ref\":\"AWS::StackName\"},\"/*\"]]}}]}}]}},\"LambdaBarAPI\":{\"Type\":\"AWS::Lambda::Function\",\"Properties\":{\"Handler\":\"dawsonindex.barAPI\",\"Role\":{\"Fn::GetAtt\":[\"ExecutionRoleForLambdaBarAPI\",\"Arn\"]},\"Code\":{},\"Runtime\":\"nodejs4.3\",\"MemorySize\":1024,\"Timeout\":30,\"Environment\":{\"Variables\":{\"DAWSON_DistributionWWW\":{\"Fn::GetAtt\":[\"WWWDistribution\",\"DomainName\"]},\"NODE_ENV\":\"development\"}}}},\"DeploymentAVA\":{\"DependsOn\":[],\"Type\":\"AWS::ApiGateway::Deployment\",\"Properties\":{\"RestApiId\":{\"Ref\":\"API\"},\"Description\":\"Automated deployment by dawson\"}},\"WWWDistribution\":{\"Type\":\"AWS::CloudFront::Distribution\",\"DependsOn\":[\"API\",\"BucketAssets\"],\"Properties\":{\"DistributionConfig\":{\"Aliases\":[\"mydomain.com\"],\"Origins\":[{\"DomainName\":{\"Fn::Join\":[\"\",[{\"Ref\":\"BucketAssets\"},\".s3-website-\",{\"Ref\":\"AWS::Region\"},\".amazonaws.com\"]]},\"Id\":\"s3www\",\"CustomOriginConfig\":{\"HTTPPort\":\"80\",\"HTTPSPort\":\"443\",\"OriginProtocolPolicy\":\"http-only\"}},{\"DomainName\":{\"Fn::Join\":[\"\",[{\"Ref\":\"API\"},\".execute-api.\",{\"Ref\":\"AWS::Region\"},\".amazonaws.com\"]]},\"Id\":\"api\",\"CustomOriginConfig\":{\"HTTPPort\":\"80\",\"HTTPSPort\":\"443\",\"OriginProtocolPolicy\":\"https-only\"}}],\"Enabled\":\"true\",\"Comment\":\"\",\"DefaultRootObject\":\"index.html\",\"DefaultCacheBehavior\":{\"TargetOriginId\":\"s3www\",\"SmoothStreaming\":\"false\",\"ForwardedValues\":{\"QueryString\":\"true\"},\"MinTTL\":\"0\",\"MaxTTL\":\"0\",\"DefaultTTL\":\"0\",\"ViewerProtocolPolicy\":\"allow-all\"},\"CacheBehaviors\":[{\"AllowedMethods\":[\"DELETE\",\"GET\",\"HEAD\",\"OPTIONS\",\"PATCH\",\"POST\",\"PUT\"],\"TargetOriginId\":\"api\",\"ForwardedValues\":{\"QueryString\":\"true\",\"Headers\":[\"Authorization\",\"Accept\",\"Content-Type\",\"Origin\",\"Referer\",\"Access-Control-Request-Headers\",\"Access-Control-Request-Method\"]},\"ViewerProtocolPolicy\":\"allow-all\",\"MinTTL\":\"0\",\"MaxTTL\":\"0\",\"DefaultTTL\":\"0\",\"PathPattern\":\"prod/*\"}],\"PriceClass\":\"PriceClass_200\",\"ViewerCertificate\":{\"AcmCertificateArn\":\"arn:bar\",\"SslSupportMethod\":\"sni-only\"},\"CustomErrorResponses\":[{\"ErrorCode\":\"404\",\"ResponsePagePath\":\"/index.html\",\"ResponseCode\":\"200\",\"ErrorCachingMinTTL\":\"30\"},{\"ErrorCode\":\"403\",\"ResponsePagePath\":\"/index.html\",\"ResponseCode\":\"200\",\"ErrorCachingMinTTL\":\"30\"}]}}},\"Route53Record\":{\"Type\":\"AWS::Route53::RecordSet\",\"Properties\":{\"AliasTarget\":{\"DNSName\":{\"Fn::Sub\":\"\${WWWDistribution.DomainName}\"},\"HostedZoneId\":\"Z2FDTNDATAQYW2\"},\"Comment\":\"Record managed by dawson.\",\"HostedZoneId\":{\"devel\":\"ASDBAR123\"},\"Name\":\"mydomain.com\",\"Type\":\"A\"}},\"StageProd\":{\"Type\":\"AWS::ApiGateway::Stage\",\"Properties\":{\"CacheClusterEnabled\":false,\"DeploymentId\":{\"Ref\":\"DeploymentAVA\"},\"Description\":\"prod Stage\",\"RestApiId\":{\"Ref\":\"API\"},\"StageName\":\"prod\",\"MethodSettings\":[{\"HttpMethod\":\"*\",\"ResourcePath\":\"/*\",\"LoggingLevel\":\"INFO\",\"DataTraceEnabled\":\"true\"}]}},\"RoleAPIGatewayAccount\":{\"Type\":\"AWS::IAM::Role\",\"Properties\":{\"AssumeRolePolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"apigateway.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]},\"Path\":\"/\",\"ManagedPolicyArns\":[\"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\"]}},\"APIGatewayAccount\":{\"Type\":\"AWS::ApiGateway::Account\",\"Properties\":{\"CloudWatchRoleArn\":{\"Fn::Sub\":\"\${RoleAPIGatewayAccount.Arn}\"}}}},\"Outputs\":{\"BucketAssets\":{\"Value\":{\"Ref\":\"BucketAssets\"}},\"DistributionWWW\":{\"Value\":{\"Fn::GetAtt\":[\"WWWDistribution\",\"DomainName\"]}}}},\"cloudfrontCustomDomain\":\"mydomain.com\"}"`;

exports[`primary template builder with a method using an authorizer 1`] = `"{\"supportBucketName\":\"support-bucket-test\",\"stackName\":\"\",\"cfTemplateJSON\":\"{\\n  \\\"Parameters\\\": {\\n    \\\"DawsonStage\\\": {\\n      \\\"Type\\\": \\\"String\\\",\\n      \\\"Default\\\": \\\"devel\\\"\\n    }\\n  },\\n  \\\"Resources\\\": {\\n    \\\"BucketAssets\\\": {\\n      \\\"Type\\\": \\\"AWS::S3::Bucket\\\",\\n      \\\"Properties\\\": {\\n        \\\"WebsiteConfiguration\\\": {\\n          \\\"ErrorDocument\\\": \\\"index.html\\\",\\n          \\\"IndexDocument\\\": \\\"index.html\\\"\\n        }\\n      }\\n    },\\n    \\\"API\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::RestApi\\\",\\n      \\\"Properties\\\": {\\n        \\\"Description\\\": \\\"REST API for dawson app\\\",\\n        \\\"Name\\\": \\\"AppAPIDevel\\\"\\n      }\\n    },\\n    \\\"ResourceXxx\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Resource\\\",\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"ParentId\\\": {\\n          \\\"Fn::GetAtt\\\": [\\n            \\\"API\\\",\\n            \\\"RootResourceId\\\"\\n          ]\\n        },\\n        \\\"PathPart\\\": \\\"xxx\\\"\\n      }\\n    },\\n    \\\"PermissionForLambdaBazAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Permission\\\",\\n      \\\"Properties\\\": {\\n        \\\"Action\\\": \\\"lambda:InvokeFunction\\\",\\n        \\\"FunctionName\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${LambdaBazAPI.Arn}\\\"\\n        },\\n        \\\"Principal\\\": \\\"apigateway.amazonaws.com\\\",\\n        \\\"SourceArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\\\"\\n        }\\n      }\\n    },\\n    \\\"ExecutionRoleForLambdaBazAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"lambda.amazonaws.com\\\"\\n                ],\\n                \\\"AWS\\\": [\\n                  {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:iam::\${AWS::AccountId}:root\\\"\\n                  }\\n                ]\\n              },\\n              \\\"Action\\\": [\\n                \\\"sts:AssumeRole\\\"\\n              ]\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"Policies\\\": [\\n          {\\n            \\\"PolicyName\\\": \\\"dawson-policy\\\",\\n            \\\"PolicyDocument\\\": {\\n              \\\"Version\\\": \\\"2012-10-17\\\",\\n              \\\"Statement\\\": [\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"logs:CreateLogGroup\\\",\\n                    \\\"logs:CreateLogStream\\\",\\n                    \\\"logs:PutLogEvents\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\\\"\\n                  }\\n                },\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"cloudformation:DescribeStacks\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Join\\\": [\\n                      \\\"\\\",\\n                      [\\n                        \\\"arn:aws:cloudformation:\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::Region\\\"\\n                        },\\n                        \\\":\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::AccountId\\\"\\n                        },\\n                        \\\":stack/\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::StackName\\\"\\n                        },\\n                        \\\"/*\\\"\\n                      ]\\n                    ]\\n                  }\\n                }\\n              ]\\n            }\\n          }\\n        ]\\n      }\\n    },\\n    \\\"LambdaBazAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Function\\\",\\n      \\\"Properties\\\": {\\n        \\\"Handler\\\": \\\"dawsonindex.bazAPI\\\",\\n        \\\"Role\\\": {\\n          \\\"Fn::GetAtt\\\": [\\n            \\\"ExecutionRoleForLambdaBazAPI\\\",\\n            \\\"Arn\\\"\\n          ]\\n        },\\n        \\\"Code\\\": {},\\n        \\\"Runtime\\\": \\\"nodejs4.3\\\",\\n        \\\"MemorySize\\\": 1024,\\n        \\\"Timeout\\\": 30,\\n        \\\"Environment\\\": {\\n          \\\"Variables\\\": {\\n            \\\"DAWSON_BucketAssets\\\": {\\n              \\\"Ref\\\": \\\"BucketAssets\\\"\\n            },\\n            \\\"DAWSON_DistributionWWW\\\": \\\"CloudFront disabled from config\\\",\\n            \\\"NODE_ENV\\\": \\\"development\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"ModelHelloWorldModel\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Model\\\",\\n      \\\"Properties\\\": {\\n        \\\"ContentType\\\": \\\"application/json\\\",\\n        \\\"Description\\\": \\\"Model HelloWorldModel\\\",\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"Schema\\\": \\\"{}\\\"\\n      }\\n    },\\n    \\\"APIGAuthorizerBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Authorizer\\\",\\n      \\\"Properties\\\": {\\n        \\\"AuthorizerResultTtlInSeconds\\\": 0,\\n        \\\"AuthorizerUri\\\": {\\n          \\\"Fn::Sub\\\": \\\"arn:aws:apigateway:\${AWS::Region}:lambda:path//2015-03-31/functions/\${LambdaBarAPI.Arn}/invocations\\\"\\n        },\\n        \\\"IdentitySource\\\": \\\"method.request.header.token\\\",\\n        \\\"Name\\\": \\\"APIGAuthorizerBarAPI\\\",\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"Type\\\": \\\"TOKEN\\\"\\n      }\\n    },\\n    \\\"MethodXxxGET\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Method\\\",\\n      \\\"DependsOn\\\": [\\n        \\\"APIGAuthorizerBarAPI\\\"\\n      ],\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"ResourceId\\\": {\\n          \\\"Ref\\\": \\\"ResourceXxx\\\"\\n        },\\n        \\\"HttpMethod\\\": \\\"GET\\\",\\n        \\\"Integration\\\": {\\n          \\\"IntegrationHttpMethod\\\": \\\"POST\\\",\\n          \\\"IntegrationResponses\\\": [\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set($inputRoot = $input.path(\'$\'))\\\\n$inputRoot.response\\\"\\n              },\\n              \\\"StatusCode\\\": 200\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":500.*\\\",\\n              \\\"StatusCode\\\": 500\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":400.*\\\",\\n              \\\"StatusCode\\\": 400\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":403.*\\\",\\n              \\\"StatusCode\\\": 403\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":404.*\\\",\\n              \\\"StatusCode\\\": 404\\n            }\\n          ],\\n          \\\"PassthroughBehavior\\\": \\\"NEVER\\\",\\n          \\\"RequestTemplates\\\": {\\n            \\\"application/x-www-form-urlencoded\\\": \\\"#set($allParams = $input.params())\\\\n{\\\\n  \\\\\\\"params\\\\\\\" : {\\\\n    #foreach($type in $allParams.keySet())\\\\n    #set($params = $allParams.get($type))\\\\n    \\\\\\\"$type\\\\\\\" : {\\\\n      #foreach($paramName in $params.keySet())\\\\n      \\\\\\\"$paramName\\\\\\\" : \\\\\\\"$util.escapeJavaScript($params.get($paramName))\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    }\\\\n    #if($foreach.hasNext),#end\\\\n    #end\\\\n  },\\\\n  \\\\\\\"context\\\\\\\" : {\\\\n    \\\\\\\"apiId\\\\\\\": \\\\\\\"$context.apiId\\\\\\\",\\\\n    \\\\\\\"authorizer\\\\\\\": {\\\\n      #foreach($property in $context.authorizer.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.authorizer.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"httpMethod\\\\\\\": \\\\\\\"$context.httpMethod\\\\\\\",\\\\n    \\\\\\\"identity\\\\\\\": {\\\\n      #foreach($property in $context.identity.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.identity.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"requestId\\\\\\\": \\\\\\\"$context.requestId\\\\\\\",\\\\n    \\\\\\\"resourceId\\\\\\\": \\\\\\\"$context.resourceId\\\\\\\",\\\\n    \\\\\\\"resourcePath\\\\\\\": \\\\\\\"$context.resourcePath\\\\\\\",\\\\n    \\\\\\\"stage\\\\\\\": \\\\\\\"$context.stage\\\\\\\"\\\\n  },\\\\n  \\\\\\\"body\\\\\\\": $input.json(\'$\'),\\\\n  \\\\\\\"meta\\\\\\\": {\\\\n    \\\\\\\"expectedResponseContentType\\\\\\\": \\\\\\\"text/html\\\\\\\"\\\\n  }\\\\n}\\\",\\n            \\\"application/json\\\": \\\"#set($allParams = $input.params())\\\\n{\\\\n  \\\\\\\"params\\\\\\\" : {\\\\n    #foreach($type in $allParams.keySet())\\\\n    #set($params = $allParams.get($type))\\\\n    \\\\\\\"$type\\\\\\\" : {\\\\n      #foreach($paramName in $params.keySet())\\\\n      \\\\\\\"$paramName\\\\\\\" : \\\\\\\"$util.escapeJavaScript($params.get($paramName))\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    }\\\\n    #if($foreach.hasNext),#end\\\\n    #end\\\\n  },\\\\n  \\\\\\\"context\\\\\\\" : {\\\\n    \\\\\\\"apiId\\\\\\\": \\\\\\\"$context.apiId\\\\\\\",\\\\n    \\\\\\\"authorizer\\\\\\\": {\\\\n      #foreach($property in $context.authorizer.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.authorizer.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"httpMethod\\\\\\\": \\\\\\\"$context.httpMethod\\\\\\\",\\\\n    \\\\\\\"identity\\\\\\\": {\\\\n      #foreach($property in $context.identity.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.identity.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"requestId\\\\\\\": \\\\\\\"$context.requestId\\\\\\\",\\\\n    \\\\\\\"resourceId\\\\\\\": \\\\\\\"$context.resourceId\\\\\\\",\\\\n    \\\\\\\"resourcePath\\\\\\\": \\\\\\\"$context.resourcePath\\\\\\\",\\\\n    \\\\\\\"stage\\\\\\\": \\\\\\\"$context.stage\\\\\\\"\\\\n  },\\\\n  \\\\\\\"body\\\\\\\": $input.json(\'$\'),\\\\n  \\\\\\\"meta\\\\\\\": {\\\\n    \\\\\\\"expectedResponseContentType\\\\\\\": \\\\\\\"text/html\\\\\\\"\\\\n  }\\\\n}\\\"\\n          },\\n          \\\"Type\\\": \\\"AWS\\\",\\n          \\\"Uri\\\": {\\n            \\\"Fn::Join\\\": [\\n              \\\"\\\",\\n              [\\n                \\\"arn:aws:apigateway:\\\",\\n                {\\n                  \\\"Ref\\\": \\\"AWS::Region\\\"\\n                },\\n                \\\":lambda:path/2015-03-31/functions/\\\",\\n                {\\n                  \\\"Fn::GetAtt\\\": [\\n                    \\\"LambdaBazAPI\\\",\\n                    \\\"Arn\\\"\\n                  ]\\n                },\\n                \\\"/invocations\\\"\\n              ]\\n            ]\\n          }\\n        },\\n        \\\"MethodResponses\\\": [\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 200\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 400\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 403\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 404\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 500\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 307,\\n            \\\"ResponseParameters\\\": {\\n              \\\"method.response.header.Location\\\": false\\n            }\\n          }\\n        ],\\n        \\\"AuthorizationType\\\": \\\"CUSTOM\\\",\\n        \\\"AuthorizerId\\\": {\\n          \\\"Ref\\\": \\\"APIGAuthorizerBarAPI\\\"\\n        }\\n      }\\n    },\\n    \\\"PermissionForLambdaBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Permission\\\",\\n      \\\"Properties\\\": {\\n        \\\"Action\\\": \\\"lambda:InvokeFunction\\\",\\n        \\\"FunctionName\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${LambdaBarAPI.Arn}\\\"\\n        },\\n        \\\"Principal\\\": \\\"apigateway.amazonaws.com\\\",\\n        \\\"SourceArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\\\"\\n        }\\n      }\\n    },\\n    \\\"ExecutionRoleForLambdaBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"lambda.amazonaws.com\\\"\\n                ],\\n                \\\"AWS\\\": [\\n                  {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:iam::\${AWS::AccountId}:root\\\"\\n                  }\\n                ]\\n              },\\n              \\\"Action\\\": [\\n                \\\"sts:AssumeRole\\\"\\n              ]\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"Policies\\\": [\\n          {\\n            \\\"PolicyName\\\": \\\"dawson-policy\\\",\\n            \\\"PolicyDocument\\\": {\\n              \\\"Version\\\": \\\"2012-10-17\\\",\\n              \\\"Statement\\\": [\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"logs:CreateLogGroup\\\",\\n                    \\\"logs:CreateLogStream\\\",\\n                    \\\"logs:PutLogEvents\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\\\"\\n                  }\\n                },\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"cloudformation:DescribeStacks\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Join\\\": [\\n                      \\\"\\\",\\n                      [\\n                        \\\"arn:aws:cloudformation:\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::Region\\\"\\n                        },\\n                        \\\":\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::AccountId\\\"\\n                        },\\n                        \\\":stack/\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::StackName\\\"\\n                        },\\n                        \\\"/*\\\"\\n                      ]\\n                    ]\\n                  }\\n                }\\n              ]\\n            }\\n          }\\n        ]\\n      }\\n    },\\n    \\\"LambdaBarAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Function\\\",\\n      \\\"Properties\\\": {\\n        \\\"Handler\\\": \\\"dawsonindex.barAPI\\\",\\n        \\\"Role\\\": {\\n          \\\"Fn::GetAtt\\\": [\\n            \\\"ExecutionRoleForLambdaBarAPI\\\",\\n            \\\"Arn\\\"\\n          ]\\n        },\\n        \\\"Code\\\": {},\\n        \\\"Runtime\\\": \\\"nodejs4.3\\\",\\n        \\\"MemorySize\\\": 1024,\\n        \\\"Timeout\\\": 30,\\n        \\\"Environment\\\": {\\n          \\\"Variables\\\": {\\n            \\\"DAWSON_DistributionWWW\\\": \\\"CloudFront disabled from config\\\",\\n            \\\"NODE_ENV\\\": \\\"development\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"DeploymentAVA\\\": {\\n      \\\"DependsOn\\\": [\\n        \\\"MethodXxxGET\\\"\\n      ],\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Deployment\\\",\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"Description\\\": \\\"Automated deployment by dawson\\\"\\n      }\\n    },\\n    \\\"StageProd\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Stage\\\",\\n      \\\"Properties\\\": {\\n        \\\"CacheClusterEnabled\\\": false,\\n        \\\"DeploymentId\\\": {\\n          \\\"Ref\\\": \\\"DeploymentAVA\\\"\\n        },\\n        \\\"Description\\\": \\\"prod Stage\\\",\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"StageName\\\": \\\"prod\\\",\\n        \\\"MethodSettings\\\": [\\n          {\\n            \\\"HttpMethod\\\": \\\"*\\\",\\n            \\\"ResourcePath\\\": \\\"/*\\\",\\n            \\\"LoggingLevel\\\": \\\"INFO\\\",\\n            \\\"DataTraceEnabled\\\": \\\"true\\\"\\n          }\\n        ]\\n      }\\n    },\\n    \\\"RoleAPIGatewayAccount\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"apigateway.amazonaws.com\\\"\\n                ]\\n              },\\n              \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"ManagedPolicyArns\\\": [\\n          \\\"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\\\"\\n        ]\\n      }\\n    },\\n    \\\"APIGatewayAccount\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Account\\\",\\n      \\\"Properties\\\": {\\n        \\\"CloudWatchRoleArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${RoleAPIGatewayAccount.Arn}\\\"\\n        }\\n      }\\n    }\\n  },\\n  \\\"Outputs\\\": {\\n    \\\"BucketAssets\\\": {\\n      \\\"Value\\\": {\\n        \\\"Ref\\\": \\\"BucketAssets\\\"\\n      }\\n    },\\n    \\\"DistributionWWW\\\": {\\n      \\\"Value\\\": \\\"CloudFront disabled from config\\\"\\n    }\\n  }\\n}\",\"cfTemplate\":{\"Parameters\":{\"DawsonStage\":{\"Type\":\"String\",\"Default\":\"devel\"}},\"Resources\":{\"BucketAssets\":{\"Type\":\"AWS::S3::Bucket\",\"Properties\":{\"WebsiteConfiguration\":{\"ErrorDocument\":\"index.html\",\"IndexDocument\":\"index.html\"}}},\"API\":{\"Type\":\"AWS::ApiGateway::RestApi\",\"Properties\":{\"Description\":\"REST API for dawson app\",\"Name\":\"AppAPIDevel\"}},\"ResourceXxx\":{\"Type\":\"AWS::ApiGateway::Resource\",\"Properties\":{\"RestApiId\":{\"Ref\":\"API\"},\"ParentId\":{\"Fn::GetAtt\":[\"API\",\"RootResourceId\"]},\"PathPart\":\"xxx\"}},\"PermissionForLambdaBazAPI\":{\"Type\":\"AWS::Lambda::Permission\",\"Properties\":{\"Action\":\"lambda:InvokeFunction\",\"FunctionName\":{\"Fn::Sub\":\"\${LambdaBazAPI.Arn}\"},\"Principal\":\"apigateway.amazonaws.com\",\"SourceArn\":{\"Fn::Sub\":\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\"}}},\"ExecutionRoleForLambdaBazAPI\":{\"Type\":\"AWS::IAM::Role\",\"Properties\":{\"AssumeRolePolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\"],\"AWS\":[{\"Fn::Sub\":\"arn:aws:iam::\${AWS::AccountId}:root\"}]},\"Action\":[\"sts:AssumeRole\"]}]},\"Path\":\"/\",\"Policies\":[{\"PolicyName\":\"dawson-policy\",\"PolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Resource\":{\"Fn::Sub\":\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\"}},{\"Effect\":\"Allow\",\"Action\":[\"cloudformation:DescribeStacks\"],\"Resource\":{\"Fn::Join\":[\"\",[\"arn:aws:cloudformation:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":stack/\",{\"Ref\":\"AWS::StackName\"},\"/*\"]]}}]}}]}},\"LambdaBazAPI\":{\"Type\":\"AWS::Lambda::Function\",\"Properties\":{\"Handler\":\"dawsonindex.bazAPI\",\"Role\":{\"Fn::GetAtt\":[\"ExecutionRoleForLambdaBazAPI\",\"Arn\"]},\"Code\":{},\"Runtime\":\"nodejs4.3\",\"MemorySize\":1024,\"Timeout\":30,\"Environment\":{\"Variables\":{\"DAWSON_BucketAssets\":{\"Ref\":\"BucketAssets\"},\"DAWSON_DistributionWWW\":\"CloudFront disabled from config\",\"NODE_ENV\":\"development\"}}}},\"ModelHelloWorldModel\":{\"Type\":\"AWS::ApiGateway::Model\",\"Properties\":{\"ContentType\":\"application/json\",\"Description\":\"Model HelloWorldModel\",\"RestApiId\":{\"Ref\":\"API\"},\"Schema\":\"{}\"}},\"APIGAuthorizerBarAPI\":{\"Type\":\"AWS::ApiGateway::Authorizer\",\"Properties\":{\"AuthorizerResultTtlInSeconds\":0,\"AuthorizerUri\":{\"Fn::Sub\":\"arn:aws:apigateway:\${AWS::Region}:lambda:path//2015-03-31/functions/\${LambdaBarAPI.Arn}/invocations\"},\"IdentitySource\":\"method.request.header.token\",\"Name\":\"APIGAuthorizerBarAPI\",\"RestApiId\":{\"Ref\":\"API\"},\"Type\":\"TOKEN\"}},\"MethodXxxGET\":{\"Type\":\"AWS::ApiGateway::Method\",\"DependsOn\":[\"APIGAuthorizerBarAPI\"],\"Properties\":{\"RestApiId\":{\"Ref\":\"API\"},\"ResourceId\":{\"Ref\":\"ResourceXxx\"},\"HttpMethod\":\"GET\",\"Integration\":{\"IntegrationHttpMethod\":\"POST\",\"IntegrationResponses\":[{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set($inputRoot = $input.path(\'$\'))\\n$inputRoot.response\"},\"StatusCode\":200},{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\n$errorMessageObj.response\"},\"SelectionPattern\":\".*\\\"httpStatus\\\":500.*\",\"StatusCode\":500},{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\n$errorMessageObj.response\"},\"SelectionPattern\":\".*\\\"httpStatus\\\":400.*\",\"StatusCode\":400},{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\n$errorMessageObj.response\"},\"SelectionPattern\":\".*\\\"httpStatus\\\":403.*\",\"StatusCode\":403},{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\n$errorMessageObj.response\"},\"SelectionPattern\":\".*\\\"httpStatus\\\":404.*\",\"StatusCode\":404}],\"PassthroughBehavior\":\"NEVER\",\"RequestTemplates\":{\"application/x-www-form-urlencoded\":\"#set($allParams = $input.params())\\n{\\n  \\\"params\\\" : {\\n    #foreach($type in $allParams.keySet())\\n    #set($params = $allParams.get($type))\\n    \\\"$type\\\" : {\\n      #foreach($paramName in $params.keySet())\\n      \\\"$paramName\\\" : \\\"$util.escapeJavaScript($params.get($paramName))\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    }\\n    #if($foreach.hasNext),#end\\n    #end\\n  },\\n  \\\"context\\\" : {\\n    \\\"apiId\\\": \\\"$context.apiId\\\",\\n    \\\"authorizer\\\": {\\n      #foreach($property in $context.authorizer.keySet())\\n      \\\"$property\\\": \\\"$context.authorizer.get($property)\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    },\\n    \\\"httpMethod\\\": \\\"$context.httpMethod\\\",\\n    \\\"identity\\\": {\\n      #foreach($property in $context.identity.keySet())\\n      \\\"$property\\\": \\\"$context.identity.get($property)\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    },\\n    \\\"requestId\\\": \\\"$context.requestId\\\",\\n    \\\"resourceId\\\": \\\"$context.resourceId\\\",\\n    \\\"resourcePath\\\": \\\"$context.resourcePath\\\",\\n    \\\"stage\\\": \\\"$context.stage\\\"\\n  },\\n  \\\"body\\\": $input.json(\'$\'),\\n  \\\"meta\\\": {\\n    \\\"expectedResponseContentType\\\": \\\"text/html\\\"\\n  }\\n}\",\"application/json\":\"#set($allParams = $input.params())\\n{\\n  \\\"params\\\" : {\\n    #foreach($type in $allParams.keySet())\\n    #set($params = $allParams.get($type))\\n    \\\"$type\\\" : {\\n      #foreach($paramName in $params.keySet())\\n      \\\"$paramName\\\" : \\\"$util.escapeJavaScript($params.get($paramName))\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    }\\n    #if($foreach.hasNext),#end\\n    #end\\n  },\\n  \\\"context\\\" : {\\n    \\\"apiId\\\": \\\"$context.apiId\\\",\\n    \\\"authorizer\\\": {\\n      #foreach($property in $context.authorizer.keySet())\\n      \\\"$property\\\": \\\"$context.authorizer.get($property)\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    },\\n    \\\"httpMethod\\\": \\\"$context.httpMethod\\\",\\n    \\\"identity\\\": {\\n      #foreach($property in $context.identity.keySet())\\n      \\\"$property\\\": \\\"$context.identity.get($property)\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    },\\n    \\\"requestId\\\": \\\"$context.requestId\\\",\\n    \\\"resourceId\\\": \\\"$context.resourceId\\\",\\n    \\\"resourcePath\\\": \\\"$context.resourcePath\\\",\\n    \\\"stage\\\": \\\"$context.stage\\\"\\n  },\\n  \\\"body\\\": $input.json(\'$\'),\\n  \\\"meta\\\": {\\n    \\\"expectedResponseContentType\\\": \\\"text/html\\\"\\n  }\\n}\"},\"Type\":\"AWS\",\"Uri\":{\"Fn::Join\":[\"\",[\"arn:aws:apigateway:\",{\"Ref\":\"AWS::Region\"},\":lambda:path/2015-03-31/functions/\",{\"Fn::GetAtt\":[\"LambdaBazAPI\",\"Arn\"]},\"/invocations\"]]}},\"MethodResponses\":[{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":200},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":400},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":403},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":404},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":500},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":307,\"ResponseParameters\":{\"method.response.header.Location\":false}}],\"AuthorizationType\":\"CUSTOM\",\"AuthorizerId\":{\"Ref\":\"APIGAuthorizerBarAPI\"}}},\"PermissionForLambdaBarAPI\":{\"Type\":\"AWS::Lambda::Permission\",\"Properties\":{\"Action\":\"lambda:InvokeFunction\",\"FunctionName\":{\"Fn::Sub\":\"\${LambdaBarAPI.Arn}\"},\"Principal\":\"apigateway.amazonaws.com\",\"SourceArn\":{\"Fn::Sub\":\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\"}}},\"ExecutionRoleForLambdaBarAPI\":{\"Type\":\"AWS::IAM::Role\",\"Properties\":{\"AssumeRolePolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\"],\"AWS\":[{\"Fn::Sub\":\"arn:aws:iam::\${AWS::AccountId}:root\"}]},\"Action\":[\"sts:AssumeRole\"]}]},\"Path\":\"/\",\"Policies\":[{\"PolicyName\":\"dawson-policy\",\"PolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Resource\":{\"Fn::Sub\":\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\"}},{\"Effect\":\"Allow\",\"Action\":[\"cloudformation:DescribeStacks\"],\"Resource\":{\"Fn::Join\":[\"\",[\"arn:aws:cloudformation:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":stack/\",{\"Ref\":\"AWS::StackName\"},\"/*\"]]}}]}}]}},\"LambdaBarAPI\":{\"Type\":\"AWS::Lambda::Function\",\"Properties\":{\"Handler\":\"dawsonindex.barAPI\",\"Role\":{\"Fn::GetAtt\":[\"ExecutionRoleForLambdaBarAPI\",\"Arn\"]},\"Code\":{},\"Runtime\":\"nodejs4.3\",\"MemorySize\":1024,\"Timeout\":30,\"Environment\":{\"Variables\":{\"DAWSON_DistributionWWW\":\"CloudFront disabled from config\",\"NODE_ENV\":\"development\"}}}},\"DeploymentAVA\":{\"DependsOn\":[\"MethodXxxGET\"],\"Type\":\"AWS::ApiGateway::Deployment\",\"Properties\":{\"RestApiId\":{\"Ref\":\"API\"},\"Description\":\"Automated deployment by dawson\"}},\"StageProd\":{\"Type\":\"AWS::ApiGateway::Stage\",\"Properties\":{\"CacheClusterEnabled\":false,\"DeploymentId\":{\"Ref\":\"DeploymentAVA\"},\"Description\":\"prod Stage\",\"RestApiId\":{\"Ref\":\"API\"},\"StageName\":\"prod\",\"MethodSettings\":[{\"HttpMethod\":\"*\",\"ResourcePath\":\"/*\",\"LoggingLevel\":\"INFO\",\"DataTraceEnabled\":\"true\"}]}},\"RoleAPIGatewayAccount\":{\"Type\":\"AWS::IAM::Role\",\"Properties\":{\"AssumeRolePolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"apigateway.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]},\"Path\":\"/\",\"ManagedPolicyArns\":[\"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\"]}},\"APIGatewayAccount\":{\"Type\":\"AWS::ApiGateway::Account\",\"Properties\":{\"CloudWatchRoleArn\":{\"Fn::Sub\":\"\${RoleAPIGatewayAccount.Arn}\"}}}},\"Outputs\":{\"BucketAssets\":{\"Value\":{\"Ref\":\"BucketAssets\"}},\"DistributionWWW\":{\"Value\":\"CloudFront disabled from config\"}}},\"cloudfrontCustomDomain\":null}"`;

exports[`primary template builder with cloudfront disabled 1`] = `"{\"supportBucketName\":\"support-bucket-test\",\"stackName\":\"\",\"cfTemplateJSON\":\"{\\n  \\\"Parameters\\\": {\\n    \\\"DawsonStage\\\": {\\n      \\\"Type\\\": \\\"String\\\",\\n      \\\"Default\\\": \\\"devel\\\"\\n    }\\n  },\\n  \\\"Resources\\\": {\\n    \\\"BucketAssets\\\": {\\n      \\\"Type\\\": \\\"AWS::S3::Bucket\\\",\\n      \\\"Properties\\\": {\\n        \\\"WebsiteConfiguration\\\": {\\n          \\\"ErrorDocument\\\": \\\"index.html\\\",\\n          \\\"IndexDocument\\\": \\\"index.html\\\"\\n        }\\n      }\\n    },\\n    \\\"API\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::RestApi\\\",\\n      \\\"Properties\\\": {\\n        \\\"Description\\\": \\\"REST API for dawson app\\\",\\n        \\\"Name\\\": \\\"AppAPIDevel\\\"\\n      }\\n    },\\n    \\\"ResourceBar\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Resource\\\",\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"ParentId\\\": {\\n          \\\"Fn::GetAtt\\\": [\\n            \\\"API\\\",\\n            \\\"RootResourceId\\\"\\n          ]\\n        },\\n        \\\"PathPart\\\": \\\"bar\\\"\\n      }\\n    },\\n    \\\"PermissionForLambdaFooAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Permission\\\",\\n      \\\"Properties\\\": {\\n        \\\"Action\\\": \\\"lambda:InvokeFunction\\\",\\n        \\\"FunctionName\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${LambdaFooAPI.Arn}\\\"\\n        },\\n        \\\"Principal\\\": \\\"apigateway.amazonaws.com\\\",\\n        \\\"SourceArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\\\"\\n        }\\n      }\\n    },\\n    \\\"ExecutionRoleForLambdaFooAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"lambda.amazonaws.com\\\"\\n                ],\\n                \\\"AWS\\\": [\\n                  {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:iam::\${AWS::AccountId}:root\\\"\\n                  }\\n                ]\\n              },\\n              \\\"Action\\\": [\\n                \\\"sts:AssumeRole\\\"\\n              ]\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"Policies\\\": [\\n          {\\n            \\\"PolicyName\\\": \\\"dawson-policy\\\",\\n            \\\"PolicyDocument\\\": {\\n              \\\"Version\\\": \\\"2012-10-17\\\",\\n              \\\"Statement\\\": [\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"logs:CreateLogGroup\\\",\\n                    \\\"logs:CreateLogStream\\\",\\n                    \\\"logs:PutLogEvents\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Sub\\\": \\\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\\\"\\n                  }\\n                },\\n                {\\n                  \\\"Effect\\\": \\\"Allow\\\",\\n                  \\\"Action\\\": [\\n                    \\\"cloudformation:DescribeStacks\\\"\\n                  ],\\n                  \\\"Resource\\\": {\\n                    \\\"Fn::Join\\\": [\\n                      \\\"\\\",\\n                      [\\n                        \\\"arn:aws:cloudformation:\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::Region\\\"\\n                        },\\n                        \\\":\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::AccountId\\\"\\n                        },\\n                        \\\":stack/\\\",\\n                        {\\n                          \\\"Ref\\\": \\\"AWS::StackName\\\"\\n                        },\\n                        \\\"/*\\\"\\n                      ]\\n                    ]\\n                  }\\n                }\\n              ]\\n            }\\n          }\\n        ]\\n      }\\n    },\\n    \\\"LambdaFooAPI\\\": {\\n      \\\"Type\\\": \\\"AWS::Lambda::Function\\\",\\n      \\\"Properties\\\": {\\n        \\\"Handler\\\": \\\"dawsonindex.fooAPI\\\",\\n        \\\"Role\\\": {\\n          \\\"Fn::GetAtt\\\": [\\n            \\\"ExecutionRoleForLambdaFooAPI\\\",\\n            \\\"Arn\\\"\\n          ]\\n        },\\n        \\\"Code\\\": {},\\n        \\\"Runtime\\\": \\\"nodejs4.3\\\",\\n        \\\"MemorySize\\\": 1024,\\n        \\\"Timeout\\\": 30,\\n        \\\"Environment\\\": {\\n          \\\"Variables\\\": {\\n            \\\"DAWSON_BucketAssets\\\": {\\n              \\\"Ref\\\": \\\"BucketAssets\\\"\\n            },\\n            \\\"DAWSON_DistributionWWW\\\": \\\"CloudFront disabled from config\\\",\\n            \\\"NODE_ENV\\\": \\\"development\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"ModelHelloWorldModel\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Model\\\",\\n      \\\"Properties\\\": {\\n        \\\"ContentType\\\": \\\"application/json\\\",\\n        \\\"Description\\\": \\\"Model HelloWorldModel\\\",\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"Schema\\\": \\\"{}\\\"\\n      }\\n    },\\n    \\\"MethodBarPOST\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Method\\\",\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"ResourceId\\\": {\\n          \\\"Ref\\\": \\\"ResourceBar\\\"\\n        },\\n        \\\"HttpMethod\\\": \\\"POST\\\",\\n        \\\"Integration\\\": {\\n          \\\"IntegrationHttpMethod\\\": \\\"POST\\\",\\n          \\\"IntegrationResponses\\\": [\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set($inputRoot = $input.path(\'$\'))\\\\n$inputRoot.response\\\"\\n              },\\n              \\\"StatusCode\\\": 200\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":500.*\\\",\\n              \\\"StatusCode\\\": 500\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":400.*\\\",\\n              \\\"StatusCode\\\": 400\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":403.*\\\",\\n              \\\"StatusCode\\\": 403\\n            },\\n            {\\n              \\\"ResponseParameters\\\": {},\\n              \\\"ResponseTemplates\\\": {\\n                \\\"text/html\\\": \\\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\\\n$errorMessageObj.response\\\"\\n              },\\n              \\\"SelectionPattern\\\": \\\".*\\\\\\\"httpStatus\\\\\\\":404.*\\\",\\n              \\\"StatusCode\\\": 404\\n            }\\n          ],\\n          \\\"PassthroughBehavior\\\": \\\"NEVER\\\",\\n          \\\"RequestTemplates\\\": {\\n            \\\"application/x-www-form-urlencoded\\\": \\\"#set($allParams = $input.params())\\\\n{\\\\n  \\\\\\\"params\\\\\\\" : {\\\\n    #foreach($type in $allParams.keySet())\\\\n    #set($params = $allParams.get($type))\\\\n    \\\\\\\"$type\\\\\\\" : {\\\\n      #foreach($paramName in $params.keySet())\\\\n      \\\\\\\"$paramName\\\\\\\" : \\\\\\\"$util.escapeJavaScript($params.get($paramName))\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    }\\\\n    #if($foreach.hasNext),#end\\\\n    #end\\\\n  },\\\\n  \\\\\\\"context\\\\\\\" : {\\\\n    \\\\\\\"apiId\\\\\\\": \\\\\\\"$context.apiId\\\\\\\",\\\\n    \\\\\\\"authorizer\\\\\\\": {\\\\n      #foreach($property in $context.authorizer.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.authorizer.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"httpMethod\\\\\\\": \\\\\\\"$context.httpMethod\\\\\\\",\\\\n    \\\\\\\"identity\\\\\\\": {\\\\n      #foreach($property in $context.identity.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.identity.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"requestId\\\\\\\": \\\\\\\"$context.requestId\\\\\\\",\\\\n    \\\\\\\"resourceId\\\\\\\": \\\\\\\"$context.resourceId\\\\\\\",\\\\n    \\\\\\\"resourcePath\\\\\\\": \\\\\\\"$context.resourcePath\\\\\\\",\\\\n    \\\\\\\"stage\\\\\\\": \\\\\\\"$context.stage\\\\\\\"\\\\n  },\\\\n  \\\\\\\"body\\\\\\\": $input.json(\'$\'),\\\\n  \\\\\\\"meta\\\\\\\": {\\\\n    \\\\\\\"expectedResponseContentType\\\\\\\": \\\\\\\"text/html\\\\\\\"\\\\n  }\\\\n}\\\",\\n            \\\"application/json\\\": \\\"#set($allParams = $input.params())\\\\n{\\\\n  \\\\\\\"params\\\\\\\" : {\\\\n    #foreach($type in $allParams.keySet())\\\\n    #set($params = $allParams.get($type))\\\\n    \\\\\\\"$type\\\\\\\" : {\\\\n      #foreach($paramName in $params.keySet())\\\\n      \\\\\\\"$paramName\\\\\\\" : \\\\\\\"$util.escapeJavaScript($params.get($paramName))\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    }\\\\n    #if($foreach.hasNext),#end\\\\n    #end\\\\n  },\\\\n  \\\\\\\"context\\\\\\\" : {\\\\n    \\\\\\\"apiId\\\\\\\": \\\\\\\"$context.apiId\\\\\\\",\\\\n    \\\\\\\"authorizer\\\\\\\": {\\\\n      #foreach($property in $context.authorizer.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.authorizer.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"httpMethod\\\\\\\": \\\\\\\"$context.httpMethod\\\\\\\",\\\\n    \\\\\\\"identity\\\\\\\": {\\\\n      #foreach($property in $context.identity.keySet())\\\\n      \\\\\\\"$property\\\\\\\": \\\\\\\"$context.identity.get($property)\\\\\\\"\\\\n      #if($foreach.hasNext),#end\\\\n      #end\\\\n    },\\\\n    \\\\\\\"requestId\\\\\\\": \\\\\\\"$context.requestId\\\\\\\",\\\\n    \\\\\\\"resourceId\\\\\\\": \\\\\\\"$context.resourceId\\\\\\\",\\\\n    \\\\\\\"resourcePath\\\\\\\": \\\\\\\"$context.resourcePath\\\\\\\",\\\\n    \\\\\\\"stage\\\\\\\": \\\\\\\"$context.stage\\\\\\\"\\\\n  },\\\\n  \\\\\\\"body\\\\\\\": $input.json(\'$\'),\\\\n  \\\\\\\"meta\\\\\\\": {\\\\n    \\\\\\\"expectedResponseContentType\\\\\\\": \\\\\\\"text/html\\\\\\\"\\\\n  }\\\\n}\\\"\\n          },\\n          \\\"Type\\\": \\\"AWS\\\",\\n          \\\"Uri\\\": {\\n            \\\"Fn::Join\\\": [\\n              \\\"\\\",\\n              [\\n                \\\"arn:aws:apigateway:\\\",\\n                {\\n                  \\\"Ref\\\": \\\"AWS::Region\\\"\\n                },\\n                \\\":lambda:path/2015-03-31/functions/\\\",\\n                {\\n                  \\\"Fn::GetAtt\\\": [\\n                    \\\"LambdaFooAPI\\\",\\n                    \\\"Arn\\\"\\n                  ]\\n                },\\n                \\\"/invocations\\\"\\n              ]\\n            ]\\n          }\\n        },\\n        \\\"MethodResponses\\\": [\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 200\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 400\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 403\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 404\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 500\\n          },\\n          {\\n            \\\"ResponseModels\\\": {\\n              \\\"text/html\\\": {\\n                \\\"Ref\\\": \\\"ModelHelloWorldModel\\\"\\n              }\\n            },\\n            \\\"StatusCode\\\": 307,\\n            \\\"ResponseParameters\\\": {\\n              \\\"method.response.header.Location\\\": false\\n            }\\n          }\\n        ],\\n        \\\"AuthorizationType\\\": \\\"NONE\\\"\\n      }\\n    },\\n    \\\"DeploymentAVA\\\": {\\n      \\\"DependsOn\\\": [\\n        \\\"MethodBarPOST\\\"\\n      ],\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Deployment\\\",\\n      \\\"Properties\\\": {\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"Description\\\": \\\"Automated deployment by dawson\\\"\\n      }\\n    },\\n    \\\"StageProd\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Stage\\\",\\n      \\\"Properties\\\": {\\n        \\\"CacheClusterEnabled\\\": false,\\n        \\\"DeploymentId\\\": {\\n          \\\"Ref\\\": \\\"DeploymentAVA\\\"\\n        },\\n        \\\"Description\\\": \\\"prod Stage\\\",\\n        \\\"RestApiId\\\": {\\n          \\\"Ref\\\": \\\"API\\\"\\n        },\\n        \\\"StageName\\\": \\\"prod\\\",\\n        \\\"MethodSettings\\\": [\\n          {\\n            \\\"HttpMethod\\\": \\\"*\\\",\\n            \\\"ResourcePath\\\": \\\"/*\\\",\\n            \\\"LoggingLevel\\\": \\\"INFO\\\",\\n            \\\"DataTraceEnabled\\\": \\\"true\\\"\\n          }\\n        ]\\n      }\\n    },\\n    \\\"RoleAPIGatewayAccount\\\": {\\n      \\\"Type\\\": \\\"AWS::IAM::Role\\\",\\n      \\\"Properties\\\": {\\n        \\\"AssumeRolePolicyDocument\\\": {\\n          \\\"Version\\\": \\\"2012-10-17\\\",\\n          \\\"Statement\\\": [\\n            {\\n              \\\"Effect\\\": \\\"Allow\\\",\\n              \\\"Principal\\\": {\\n                \\\"Service\\\": [\\n                  \\\"apigateway.amazonaws.com\\\"\\n                ]\\n              },\\n              \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n            }\\n          ]\\n        },\\n        \\\"Path\\\": \\\"/\\\",\\n        \\\"ManagedPolicyArns\\\": [\\n          \\\"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\\\"\\n        ]\\n      }\\n    },\\n    \\\"APIGatewayAccount\\\": {\\n      \\\"Type\\\": \\\"AWS::ApiGateway::Account\\\",\\n      \\\"Properties\\\": {\\n        \\\"CloudWatchRoleArn\\\": {\\n          \\\"Fn::Sub\\\": \\\"\${RoleAPIGatewayAccount.Arn}\\\"\\n        }\\n      }\\n    }\\n  },\\n  \\\"Outputs\\\": {\\n    \\\"BucketAssets\\\": {\\n      \\\"Value\\\": {\\n        \\\"Ref\\\": \\\"BucketAssets\\\"\\n      }\\n    },\\n    \\\"DistributionWWW\\\": {\\n      \\\"Value\\\": \\\"CloudFront disabled from config\\\"\\n    }\\n  }\\n}\",\"cfTemplate\":{\"Parameters\":{\"DawsonStage\":{\"Type\":\"String\",\"Default\":\"devel\"}},\"Resources\":{\"BucketAssets\":{\"Type\":\"AWS::S3::Bucket\",\"Properties\":{\"WebsiteConfiguration\":{\"ErrorDocument\":\"index.html\",\"IndexDocument\":\"index.html\"}}},\"API\":{\"Type\":\"AWS::ApiGateway::RestApi\",\"Properties\":{\"Description\":\"REST API for dawson app\",\"Name\":\"AppAPIDevel\"}},\"ResourceBar\":{\"Type\":\"AWS::ApiGateway::Resource\",\"Properties\":{\"RestApiId\":{\"Ref\":\"API\"},\"ParentId\":{\"Fn::GetAtt\":[\"API\",\"RootResourceId\"]},\"PathPart\":\"bar\"}},\"PermissionForLambdaFooAPI\":{\"Type\":\"AWS::Lambda::Permission\",\"Properties\":{\"Action\":\"lambda:InvokeFunction\",\"FunctionName\":{\"Fn::Sub\":\"\${LambdaFooAPI.Arn}\"},\"Principal\":\"apigateway.amazonaws.com\",\"SourceArn\":{\"Fn::Sub\":\"arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/prod*\"}}},\"ExecutionRoleForLambdaFooAPI\":{\"Type\":\"AWS::IAM::Role\",\"Properties\":{\"AssumeRolePolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\"],\"AWS\":[{\"Fn::Sub\":\"arn:aws:iam::\${AWS::AccountId}:root\"}]},\"Action\":[\"sts:AssumeRole\"]}]},\"Path\":\"/\",\"Policies\":[{\"PolicyName\":\"dawson-policy\",\"PolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Resource\":{\"Fn::Sub\":\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:*\"}},{\"Effect\":\"Allow\",\"Action\":[\"cloudformation:DescribeStacks\"],\"Resource\":{\"Fn::Join\":[\"\",[\"arn:aws:cloudformation:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":stack/\",{\"Ref\":\"AWS::StackName\"},\"/*\"]]}}]}}]}},\"LambdaFooAPI\":{\"Type\":\"AWS::Lambda::Function\",\"Properties\":{\"Handler\":\"dawsonindex.fooAPI\",\"Role\":{\"Fn::GetAtt\":[\"ExecutionRoleForLambdaFooAPI\",\"Arn\"]},\"Code\":{},\"Runtime\":\"nodejs4.3\",\"MemorySize\":1024,\"Timeout\":30,\"Environment\":{\"Variables\":{\"DAWSON_BucketAssets\":{\"Ref\":\"BucketAssets\"},\"DAWSON_DistributionWWW\":\"CloudFront disabled from config\",\"NODE_ENV\":\"development\"}}}},\"ModelHelloWorldModel\":{\"Type\":\"AWS::ApiGateway::Model\",\"Properties\":{\"ContentType\":\"application/json\",\"Description\":\"Model HelloWorldModel\",\"RestApiId\":{\"Ref\":\"API\"},\"Schema\":\"{}\"}},\"MethodBarPOST\":{\"Type\":\"AWS::ApiGateway::Method\",\"Properties\":{\"RestApiId\":{\"Ref\":\"API\"},\"ResourceId\":{\"Ref\":\"ResourceBar\"},\"HttpMethod\":\"POST\",\"Integration\":{\"IntegrationHttpMethod\":\"POST\",\"IntegrationResponses\":[{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set($inputRoot = $input.path(\'$\'))\\n$inputRoot.response\"},\"StatusCode\":200},{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\n$errorMessageObj.response\"},\"SelectionPattern\":\".*\\\"httpStatus\\\":500.*\",\"StatusCode\":500},{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\n$errorMessageObj.response\"},\"SelectionPattern\":\".*\\\"httpStatus\\\":400.*\",\"StatusCode\":400},{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\n$errorMessageObj.response\"},\"SelectionPattern\":\".*\\\"httpStatus\\\":403.*\",\"StatusCode\":403},{\"ResponseParameters\":{},\"ResponseTemplates\":{\"text/html\":\"#set ($errorMessageObj = $util.parseJson($input.path(\'$.errorMessage\')))\\n$errorMessageObj.response\"},\"SelectionPattern\":\".*\\\"httpStatus\\\":404.*\",\"StatusCode\":404}],\"PassthroughBehavior\":\"NEVER\",\"RequestTemplates\":{\"application/x-www-form-urlencoded\":\"#set($allParams = $input.params())\\n{\\n  \\\"params\\\" : {\\n    #foreach($type in $allParams.keySet())\\n    #set($params = $allParams.get($type))\\n    \\\"$type\\\" : {\\n      #foreach($paramName in $params.keySet())\\n      \\\"$paramName\\\" : \\\"$util.escapeJavaScript($params.get($paramName))\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    }\\n    #if($foreach.hasNext),#end\\n    #end\\n  },\\n  \\\"context\\\" : {\\n    \\\"apiId\\\": \\\"$context.apiId\\\",\\n    \\\"authorizer\\\": {\\n      #foreach($property in $context.authorizer.keySet())\\n      \\\"$property\\\": \\\"$context.authorizer.get($property)\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    },\\n    \\\"httpMethod\\\": \\\"$context.httpMethod\\\",\\n    \\\"identity\\\": {\\n      #foreach($property in $context.identity.keySet())\\n      \\\"$property\\\": \\\"$context.identity.get($property)\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    },\\n    \\\"requestId\\\": \\\"$context.requestId\\\",\\n    \\\"resourceId\\\": \\\"$context.resourceId\\\",\\n    \\\"resourcePath\\\": \\\"$context.resourcePath\\\",\\n    \\\"stage\\\": \\\"$context.stage\\\"\\n  },\\n  \\\"body\\\": $input.json(\'$\'),\\n  \\\"meta\\\": {\\n    \\\"expectedResponseContentType\\\": \\\"text/html\\\"\\n  }\\n}\",\"application/json\":\"#set($allParams = $input.params())\\n{\\n  \\\"params\\\" : {\\n    #foreach($type in $allParams.keySet())\\n    #set($params = $allParams.get($type))\\n    \\\"$type\\\" : {\\n      #foreach($paramName in $params.keySet())\\n      \\\"$paramName\\\" : \\\"$util.escapeJavaScript($params.get($paramName))\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    }\\n    #if($foreach.hasNext),#end\\n    #end\\n  },\\n  \\\"context\\\" : {\\n    \\\"apiId\\\": \\\"$context.apiId\\\",\\n    \\\"authorizer\\\": {\\n      #foreach($property in $context.authorizer.keySet())\\n      \\\"$property\\\": \\\"$context.authorizer.get($property)\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    },\\n    \\\"httpMethod\\\": \\\"$context.httpMethod\\\",\\n    \\\"identity\\\": {\\n      #foreach($property in $context.identity.keySet())\\n      \\\"$property\\\": \\\"$context.identity.get($property)\\\"\\n      #if($foreach.hasNext),#end\\n      #end\\n    },\\n    \\\"requestId\\\": \\\"$context.requestId\\\",\\n    \\\"resourceId\\\": \\\"$context.resourceId\\\",\\n    \\\"resourcePath\\\": \\\"$context.resourcePath\\\",\\n    \\\"stage\\\": \\\"$context.stage\\\"\\n  },\\n  \\\"body\\\": $input.json(\'$\'),\\n  \\\"meta\\\": {\\n    \\\"expectedResponseContentType\\\": \\\"text/html\\\"\\n  }\\n}\"},\"Type\":\"AWS\",\"Uri\":{\"Fn::Join\":[\"\",[\"arn:aws:apigateway:\",{\"Ref\":\"AWS::Region\"},\":lambda:path/2015-03-31/functions/\",{\"Fn::GetAtt\":[\"LambdaFooAPI\",\"Arn\"]},\"/invocations\"]]}},\"MethodResponses\":[{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":200},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":400},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":403},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":404},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":500},{\"ResponseModels\":{\"text/html\":{\"Ref\":\"ModelHelloWorldModel\"}},\"StatusCode\":307,\"ResponseParameters\":{\"method.response.header.Location\":false}}],\"AuthorizationType\":\"NONE\"}},\"DeploymentAVA\":{\"DependsOn\":[\"MethodBarPOST\"],\"Type\":\"AWS::ApiGateway::Deployment\",\"Properties\":{\"RestApiId\":{\"Ref\":\"API\"},\"Description\":\"Automated deployment by dawson\"}},\"StageProd\":{\"Type\":\"AWS::ApiGateway::Stage\",\"Properties\":{\"CacheClusterEnabled\":false,\"DeploymentId\":{\"Ref\":\"DeploymentAVA\"},\"Description\":\"prod Stage\",\"RestApiId\":{\"Ref\":\"API\"},\"StageName\":\"prod\",\"MethodSettings\":[{\"HttpMethod\":\"*\",\"ResourcePath\":\"/*\",\"LoggingLevel\":\"INFO\",\"DataTraceEnabled\":\"true\"}]}},\"RoleAPIGatewayAccount\":{\"Type\":\"AWS::IAM::Role\",\"Properties\":{\"AssumeRolePolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"apigateway.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]},\"Path\":\"/\",\"ManagedPolicyArns\":[\"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\"]}},\"APIGatewayAccount\":{\"Type\":\"AWS::ApiGateway::Account\",\"Properties\":{\"CloudWatchRoleArn\":{\"Fn::Sub\":\"\${RoleAPIGatewayAccount.Arn}\"}}}},\"Outputs\":{\"BucketAssets\":{\"Value\":{\"Ref\":\"BucketAssets\"}},\"DistributionWWW\":{\"Value\":\"CloudFront disabled from config\"}}},\"cloudfrontCustomDomain\":null}"`;
